<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- environment 指 mybatis 可以配置多个环境 default 默认环境
        每个 SqlSessionFactory对应一个环境environment
    -->
    <properties resource="db.properties"></properties>
    <typeAliases>
        <!-- 为指定类型  设置别名 在mapper配置文件中简化类名引用-->
        <typeAlias type="cn.xc.entity.User" alias="User"></typeAlias>
        <!-- 为某个包下的所有类指定别名默认别名是对应的类名-->
        <package name="cn.xc.entity"></package>
    </typeAliases>
    <environments default="development">
        <environment id="development">
            <!-- JDBC 这个配置直接使用JDBC的提交和回滚功能. 它依赖从数据源获得连接来管理事务的生命周期
                 MANAGED 这个配置基本上什么都不做. 它从不提交或者回滚一个连接的事务. 而是让容器
                 (Spring或者J2EE应用服务器)来管理事务的生命周期.
            -->
            <transactionManager type="JDBC"/>
            <!-- 数据源类型:
                UNPOOLED 这个类型的数据源实现只是在每次需要的时候简单的打开和关闭连接.
                POOLED 这个数据源的实现缓存了JDBC的连接对象, 用于避免每次创建新的数据库连接时都初始化和
                进行认证, 加快程序响应. 并发WEB程序通常通过这种做法来活的快速响应.
                JNDI 这个数据源的配置是为了准备与像Spring或应用服务器能够在外部或者内部配置数据源的容器一起使用,
                然后在JNDI上下文中引用它.
                -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <!-- 定义映射SQL语句文件-->
        <mapper resource="cn/xc/entity/user.mapper.xml"/>
    </mappers>
</configuration>